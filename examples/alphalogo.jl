using LinearAlgebraicRepresentation,DataStructures,Plasm
Lar=LinearAlgebraicRepresentation
using ViewerGL
GL=ViewerGL

function pointsRand(
		V::Lar.Points, EV::Lar.Cells, n = 1000, m = 0
	)::Tuple{Lar.Points, Lar.Points, Lar.Cells, Lar.Cells}
	classify = Lar.pointInPolygonClassification(V, EV)
	Vi = [0;0]
	Ve = [0;0]
	k1 = 0
	k2 = 0
	while k1 < n || k2 < m
		queryPoint = [rand();rand()]
		inOut = classify(queryPoint)

		if k1 < n && inOut == "p_in"
			Vi = hcat(Vi, queryPoint)
			k1 = k1 + 1;
		end
		if k2 < m && inOut == "p_out"
			Ve = hcat(Ve, queryPoint)
			k2 = k2 + 1;
		end
	end
	VVi = [[i] for i = 1 : n]
	VVe = [[i] for i = 1 : m]
	return Vi[:,2:end], Ve[:,2:end], VVi, VVe
end

lines =  [122.94398 125.68023 117.86586 112.85128999999999 ;
 110.91685 101.09143999999999 102.36422999999999 92.538811 ;
 102.36422999999999 92.538811 90.06983 87.193421 ;
 85.526247 87.193421 74.300928 90.667924 ;
 74.300928 90.667924 64.946495 97.616932 ;
 90.06983 87.193421 85.526247 87.193421 ;
 64.946495 97.616932 58.799295 111.24768 ;
 58.799295 111.24768 56.928408 124.07661 ;
 56.928408 124.07661 56.39387 134.50013 ;
 56.39387 134.50013 56.661139 146.52725 ;
 60.135642 160.69254 65.213764 170.04697000000002 ;
 56.661139 146.52725 60.135642 160.69254 ;
 65.213764 170.04697000000002 72.430041 175.65963000000002 ;
 72.430041 175.65963000000002 80.98266600000001 179.40141000000003 ;
 80.98266600000001 179.40141000000003 93.27706400000001 178.59960000000004 ;
 93.27706400000001 178.59960000000004 104.23511 170.58151000000004 ;
 104.23511 170.58151000000004 110.64958 160.69254000000004 ;
 110.64958 160.69254000000004 117.06405 146.79452000000003 ;
 117.06405 146.79452000000003 121.60763 135.83647000000002 ;
 121.60763 135.83647000000002 122.94398 128.08566000000002 ;
 127.75483 114.98945 120.80582 102.42778 ;
 122.94398 125.68023 122.94398 128.08566000000002 ;
 120.80582 102.42778 110.38231 88.797036 ;
 110.38231 88.797036 98.087914 80.778952 ;
 98.087914 80.778952 84.72444 78.373525 ;
 84.72444 78.373525 68.688267 81.046221 ;
 68.688267 81.046221 58.264755 84.253455 ;
 58.264755 84.253455 47.306706 92.538811 ;
 47.306706 92.538811 39.288619 104.0314 ;
 39.288619 104.0314 33.408691 117.66215000000001 ;
 33.408691 117.66215000000001 32.072344 124.61115000000001 ;
 32.072344 124.61115000000001 31.270535000000002 137.17282 ;
 31.270535000000002 137.17282 32.874151000000005 149.19995 ;
 32.874151000000005 149.19995 36.348656000000005 159.62346 ;
 36.348656000000005 159.62346 41.694047000000005 167.64155 ;
 48.643053 174.32329 55.592061 179.66868 ;
 41.694047000000005 167.64155 48.643053 174.32329 ;
 55.592061 179.66868 67.619189 184.47952999999998 ;
 67.619189 184.47952999999998 80.98266600000001 186.88494999999998 ;
 80.98266600000001 186.88494999999998 94.88068000000001 186.08314 ;
 94.88068000000001 186.08314 107.44235 183.14317999999997 ;
 107.44235 183.14317999999997 118.66767 176.46143999999998 ;
 125.34941 169.7797 132.03115 159.35619 ;
 118.66767 176.46143999999998 125.34941 169.7797 ;
 132.03115 159.35619 134.97111 169.7797 ;
 134.97111 169.7797 139.51469 177.79779 ;
 139.51469 177.79779 145.12735 183.41045 ;
 152.07636 186.61768 160.62897999999998 186.35041 ;
 145.12735 183.41045 152.07636 186.61768 ;
 160.62897999999998 186.35041 168.11253 182.07410000000002 ;
 168.11253 182.07410000000002 173.19065 175.65963000000002 ;
 173.19065 175.65963000000002 175.86335 167.10701000000003 ;
 175.86335 167.10701000000003 176.66514999999998 158.82165000000003 ;
 176.66514999999998 158.82165000000003 171.58702999999997 158.55438000000004 ;
 171.58702999999997 158.55438000000004 169.44887999999997 164.70158000000004 ;
 169.44887999999997 164.70158000000004 165.43983999999998 170.58151000000004 ;
 165.43983999999998 170.58151000000004 158.22355999999996 173.78875000000005 ;
 158.22355999999996 173.78875000000005 151.54181999999997 172.98694000000006 ;
 151.54181999999997 172.98694000000006 145.12734999999998 167.37428000000006 ;
 145.12734999999998 167.37428000000006 140.04922999999997 158.55438000000007 ;
 140.04922999999997 158.55438000000007 138.17834999999997 149.19995000000006 ;
 138.17834999999997 149.19995000000006 138.71287999999996 144.12183000000005 ;
 138.71287999999996 144.12183000000005 158.75809999999996 82.11529900000005 ;
 127.75483 114.98945 137.91106999999997 82.38256800000005 ;
 158.75809999999996 82.11529900000005 137.91106999999997 82.38256800000005]

"""
	lines2lar(lines)
LAR model construction from array of float quadruples.
Each `line` in input array stands for `x1,y1,x2,y2`.
"""
function lines2lar(lines)
	vertdict = OrderedDict{Array{Float64,1}, Int64}()
	EV = Array{Int64,1}[]
	idx = 0
	for h=1:size(lines,1)
		x1,y1,x2,y2 = lines[h,:]

		if ! haskey(vertdict, [x1,y1])
			idx += 1
			vertdict[[x1,y1]] = idx
		end
		if ! haskey(vertdict, [x2,y2])
			idx += 1
			vertdict[[x2,y2]] = idx
		end
		v1,v2 = vertdict[[x1,y1]],vertdict[[x2,y2]]
		push!(EV, [v1,v2])
	end
	V = hcat(collect(keys(vertdict))...)
	return V,EV
end

V,EV = lines2lar(lines)
push!(EV,[3,2])
V = Plasm.normalize(V)
#Plasm.view(V,EV)
Vi,Ve,VVi,VVe = pointsRand(V,EV,1000,0)

filtration = AlphaStructures.alphaFilter(Vi);
VV,EV,FV = AlphaStructures.alphaSimplex(Vi,filtration,1.)

points = [[p] for p in VV]
faces = [[f] for f in FV]
edges = [[e] for e in EV]
GL.VIEW( GL.GLExplode(Vi, [edges; faces], 2., 2., 1.2, 99, 1) );
GL.VIEW([
    GL.GLLines(Vi,EV)
	GL.GLFrame2
]);
